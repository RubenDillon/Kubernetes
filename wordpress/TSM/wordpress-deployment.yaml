apiVersion: v1
kind: Service
metadata:
  name: wordpress
  namespace: latam
  labels:
    app: wordpress
spec:
  ports:
    - port: 80
  selector:
    app: wordpress
    tier: frontend
#  type: LoadBalancer
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: wp-pv-claim
  namespace: latam
  labels:
    app: wordpress
spec:
  accessModes:
    - ReadWriteOnce
  storageClassName:
          vc01cl01-t0compute
  resources:
    requests:
      storage: 2Gi
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: wordpress
  namespace: latam
  labels:
    app: wordpress
spec:
  selector:
    matchLabels:
      app: wordpress
      tier: frontend
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        app: wordpress
        tier: frontend
    spec:
      containers:
      - image: harbor.20.253.171.68.nip.io/library/wordpress:4.8-apache
        name: wordpress
        env:
        - name: WORDPRESS_DB_HOST
          value: wordpress-mysql
        - name: WORDPRESS_DB_PASSWORD
          valueFrom:
            secretKeyRef:
              name: mysql-pass
              key: password
        ports:
        - containerPort: 80
          name: wordpress
        volumeMounts:
        - name: wordpress-persistent-storage
          mountPath: /var/www/html
      volumes:
      - name: wordpress-persistent-storage
        persistentVolumeClaim:
          claimName: wp-pv-claim
----

apiVersion: networking.istio.io/v1alpha3
kind: Gateway
metadata:
  name: mywp-gateway
  namespace: latam
spec:
  selector:
    istio: ingressgateway # use istio default controller
  servers:
  - port:
      number: 80
      name: http
      protocol: HTTP
    hosts:
    - "*"
---
apiVersion: networking.istio.io/v1alpha3
kind: VirtualService
metadata:
  name: mywp-tsm
  namespace: latam
spec:
  hosts:
  - "*"
  gateways:
  - mywp-gateway
  http:
  - match:
    - uri:
        prefix: /
    route:
    - destination:
        host: wordpress
        port:
          number: 80
